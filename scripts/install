#!/bin/bash

# Exit on command errors and treat unset variables as an error
set -eu

# Retrieve arguments
domain=$1
path=${2%/}
admin=$3
is_public=$4
registration=$5

# Load common variables
. ./_common.sh

# Check system requirements
check_requirements || ynh_die "System requirements are not met."

# Validate arguments
[[ $is_public -eq 0 && $registration -eq 1 ]] \
  && ynh_die "Application must be public to allow registration"

# Set app specific variables
dbname=$app
dbuser=$app

# Check domain/path availability with app helper
sudo yunohost app checkurl "${domain}${path}" -a "$app" \
  || ynh_die "The path ${domain}${path} is not available for app installation."

# Check that admin user is an existing account
ynh_user_exists "$admin" \
  || ynh_die "The chosen admin user does not exist."

# Check destination directory
DESTDIR="/var/www/$app"
[[ -d $DESTDIR ]] && ynh_die \
"The destination directory '$DESTDIR' already exists.\
 You should safely delete it before installing this app."

# Install dependencies
ynh_package_install_from_equivs ../conf/${DEPS_PKG_NAME}.control \
  || ynh_die "Unable to install dependencies"

# Retrieve sources in a tmp directory
PKGDIR=$(cd ../; pwd)
TMPDIR=$(ynh_mkdir_tmp)
(cd "$TMPDIR" \
 && git clone -q git://git.savannah.gnu.org/mediagoblin.git -b stable . \
 && git checkout -q v${VERSION} \
 && git apply ${PKGDIR}/patches/*.patch) \
  || ynh_die "Unable to fetch MediaGoblin sources."

# Copy additionnal plugins
cp -r ../sources/plugins/* "${TMPDIR}/extlib/"

# Create a system account for mediagoblin
sudo useradd -c "GNU MediaGoblin system account" \
    -d /var/lib/mediagoblin -m -r -g www-data mediagoblin \
  || ynh_die "Unable to create mediagoblin system account."

# Move sources, fix permissions and install MediaGoblin
sudo mv "$TMPDIR" "$DESTDIR"
sudo chown -hR mediagoblin:www-data "$DESTDIR"

# Create data directory
DATADIR="/home/yunohost.app/$app"
sudo install -o mediagoblin -g www-data -m 770 -d "$DATADIR"

# Set up MediaGoblin
SETUPLOG="/tmp/${app}-setup.log"
sudo touch "$SETUPLOG" && sudo chown admin "$SETUPLOG"
exec_cmd "cd \"${DESTDIR}\" \
 && export VIRTUALENV_FLAGS=\"--quiet\" \
 && ./bootstrap.sh && ./configure --quiet && make \
 && ./bin/easy_install scikits.audiolab \
 && mkdir -p user_dev && chmod 750 user_dev \
 && cd extlib/ynhauth \
 && ${DESTDIR}/bin/python ./setup.py develop" &>$SETUPLOG \
  || ynh_die "Unable to set up MediaGoblin. Please see log at ${SETUPLOG}"

# Configure the database
exec_cmd "cd && createuser -D -R -S ${dbuser}" postgres
exec_cmd "cd && createdb -E UNICODE -O ${dbuser} ${dbname}" postgres

# Set and copy MediaGoblin configuration
if [[ $registration -eq 1 ]]; then
  tmp_conf="../conf/mediagoblin_registration.ini"
else
  tmp_conf="../conf/mediagoblin.ini"
fi
mediagoblin_conf="${DESTDIR}/mediagoblin.ini"
sed -i "s@#DOMAIN#@${domain}@g"   "$tmp_conf"
sed -i "s@#PATH#@${path}@g"       "$tmp_conf"
sed -i "s@#DBNAME#@${dbname}@g"   "$tmp_conf"
sed -i "s@#ADMIN#@${admin}@g"     "$tmp_conf"
sed -i "s@#DATADIR#@${DATADIR}@g" "$tmp_conf"
sudo cp "$tmp_conf" "$mediagoblin_conf"
sudo chown mediagoblin: "$mediagoblin_conf"

# Set and copy Paste configuration
paste_conf="${DESTDIR}/paste.ini"
sed -i "s@#DATADIR#@${DATADIR}@g" ../conf/paste.ini
sudo cp ../conf/paste.ini "$paste_conf"
sudo chown mediagoblin: "$paste_conf"

# Populate the database
exec_cmd "cd \"${DESTDIR}\" && ./bin/gmg dbupdate"

# Create needed directories with proper ownership
sudo install -o mediagoblin -g root -m 770 -d /var/log/${app}

# Set and install systemd services
sed -i "s@#APP#@${app}@g"         ../conf/mediagoblin-*.service
sed -i "s@#DESTDIR#@${DESTDIR}@g" ../conf/mediagoblin-*.service
sudo cp ../conf/mediagoblin-*.service /etc/systemd/system/
sudo yunohost service add mediagoblin-celeryd -l "/var/log/${app}/celery.log"
sudo yunohost service add mediagoblin-paster -l "/var/log/${app}/mediagoblin.log"

# Copy and set nginx configuration
nginx_conf="/etc/nginx/conf.d/${domain}.d/${app}.conf"
sed -i "s@#PATH#@${path}@g"       ../conf/nginx.conf
sed -i "s@#DESTDIR#@${DESTDIR}@g" ../conf/nginx.conf
sed -i "s@#DATADIR#@${DATADIR}@g" ../conf/nginx.conf
sudo cp ../conf/nginx.conf "$nginx_conf"

# Save app settings
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app is_public $is_public
ynh_app_setting_set $app registration $registration

# Set SSOwat settings
if [[ $is_public -eq 1 ]]; then
  ynh_app_setting_set $app unprotected_uris "/"
else
  ynh_app_setting_set $app protected_uris "/"
fi

# Enable and reload services
sudo systemctl daemon-reload
sudo systemctl -q enable mediagoblin-celeryd.service
sudo systemctl -q enable mediagoblin-paster.service
sudo systemctl -q start mediagoblin-celeryd.service
sudo systemctl -q start mediagoblin-paster.service
sudo service nginx reload
